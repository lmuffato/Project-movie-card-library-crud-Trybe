{"version":3,"sources":["components/MovieCard.js","components/Loading.js","components/MovieForm.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","pages/MovieDetails.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","this","props","title","id","imagePath","rating","storyline","className","data-testid","alt","src","to","React","Component","Loading","MovieForm","state","handleSubmit","bind","onSubmit","field","newValue","setState","htmlFor","placeholder","type","value","onChange","event","updateMovie","target","subtitle","genre","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","MovieList","loading","fetchMovie","then","valor","console","log","map","key","MovieDetails","removeMovie","filter","status","movieAPI","match","params","NewMovie","shouldRedirect","newMovie","movieData","nextId","length","EditMovie","updatedMovie","NotFound","App","exact","path","render","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5862e2b7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, id, imagePath, rating, storyline } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={ imagePath } />\n        <div className=\"movie-card-body\">\n          <h4 className=\"movie-card-title\">{ title }</h4>\n          <h4 className=\"movie-card-rate\">{ `${rating}` }</h4>\n        </div>\n        <h4 className=\"movie-card-sinopse\">{ `${storyline}` }</h4>\n        <Link to={ `movies/${id}` } className=\"button card-btn\">VER DETALHES</Link>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    id: PropTypes.number,\n    storyline: PropTypes.string,\n    rating: PropTypes.number,\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"main-content\">Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieForm.css';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\" className=\"text-input-label\">\n          Título\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate text-input-input\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\" className=\"text-input-label\">\n          Subtítulo\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n            className=\"text-input-input\"\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\" className=\"text-input-label\">\n          Imagem\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n            className=\"text-input-input\"\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\" className=\"textarea-input-label\">\n          Sinopse\n          <br />\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n            className=\"textarea-input-input\"\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\" className=\"text-input-label\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n            className=\"text-input-input\"\n          >\n            <option value=\"action\" className=\"text-input-input\">Ação</option>\n            <option value=\"comedy\" className=\"text-input-input\">Comédia</option>\n            <option value=\"thriller\" className=\"text-input-input\">Suspense</option>\n            <option value=\"fantasy\" className=\"text-input-input\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\" className=\"text-input-label\">\n          Avaliação\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n            className=\"text-input-input\"\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n          className=\"button\"\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form className=\"form\">\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\nimport { Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  fetchMovie() {\n    this.setState(\n      { loading: true },\n      () => {\n        movieAPI.getMovies()\n          .then((valor) => {\n            this.setState({\n              movies: valor,\n              loading: false,\n            });\n          });\n      },\n    );\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n\n    console.log(movies);\n\n    return (\n      <div data-testid=\"movie-list\" className=\"main-content\">\n        <div className=\"content\">\n          {loading ? <Loading />\n            : movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />) }\n        </div>\n        <Link to=\"/movies/new\" className=\"button\">ADICIONAR CARTÃO</Link>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\nimport './MovieDetails.css';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movie: [],\n      loading: false,\n      id: '',\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  removeMovie = () => {\n    const { id } = this.state;\n    movieAPI.deleteMovie(id);\n  }\n\n  fetchMovie() {\n    const { match } = this.props;\n    const { id } = match.params;\n    this.setState(\n      { loading: true },\n      () => {\n        movieAPI.getMovie(id)\n          .then((valor) => {\n            this.setState({\n              movie: valor,\n              loading: false,\n              id,\n            });\n          });\n      },\n    );\n  }\n\n  render() {\n    const { loading, movie, id } = this.state;\n\n    const { title, storyline, imagePath, genre, rating, subtitle } = movie;\n\n    if (loading === true) {\n      return (\n        <Loading />\n      );\n    }\n\n    return (\n      <main className=\"main-content\">\n        <div data-testid=\"movie-details\" className=\"movie-card-detail\">\n          <p className=\"movie-card-detail-title\">{ `${title}` }</p>\n          <p className=\"movie-card-detail-subtitle\">{ `${subtitle}` }</p>\n          <img alt=\"Movie Cover\" src={ `../${imagePath}` } className=\"movie-detail-img\" />\n          <p className=\"movie-card-detail-storyline\">{ `${storyline}` }</p>\n          <div className=\"movie-card-detail-bottom\">\n            <p className=\"movie-card-detail-genre\">{ `Genre: ${genre}` }</p>\n            <p className=\"movie-card-detail-rating\">{ `Rating: ${rating}` }</p>\n          </div>\n          <div className=\"btn-container\">\n            <Link to={ `/movies/${id}/edit` } className=\"button\">EDITAR</Link>\n            <Link to=\"/\" className=\"button\">VOLTAR</Link>\n            <Link to=\"/\" onClick={ this.removeMovie } className=\"button\">DELETAR</Link>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie);\n    this.setState({\n      shouldRedirect: true,\n    });\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n    if (shouldRedirect) {\n      return (\n        <Redirect to=\"/\" />\n      );\n    }\n    return (\n      <div data-testid=\"new-movie\" className=\"main-content\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\nimport PropTypes from 'prop-types';\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movie: [],\n      loading: false,\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie);\n    this.setState({\n      shouldRedirect: true,\n    });\n  }\n\n  fetchMovie() {\n    const { match } = this.props;\n    const { id } = match.params;\n    this.setState(\n      { loading: true },\n      () => {\n        movieAPI.getMovie(id)\n          .then((valor) => {\n            this.setState({\n              movie: valor,\n              loading: false,\n            });\n          });\n      },\n    );\n  }\n\n  render() {\n    const { loading, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      return (\n        <Redirect to=\"/\" />\n      );\n    }\n\n    if (loading === true) {\n      return (\n        <Loading />\n      );\n    }\n\n    return (\n      <div data-testid=\"edit-movie\" className=\"main-content\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <h1 data-testid=\"404-error\" className=\"main-content\">\n        Página não encontrada\n      </h1>\n    );\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <h1 className=\"title\">Movie Card Library CRUD</h1>\n      <Switch>\n        <Route exact path=\"/\" render={ (props) => <MovieList { ...props } /> } />\n        <Route path=\"/movies/new\" render={ (props) => <NewMovie { ...props } /> } />\n        <Route path=\"/movies/:id/edit\" render={ (props) => <EditMovie { ...props } /> } />\n        <Route path=\"/movies/:id\" render={ (props) => <MovieDetails { ...props } /> } />\n        <Route component={ NotFound } />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}